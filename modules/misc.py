# -*- coding: utf-8 -*-
from __future__ import annotations

import datetime
import json
import os.path
import traceback
from itertools import cycle
from random import shuffle
from os import getpid
import platform
import asyncio
from typing import TYPE_CHECKING

import aiofiles
import disnake
import psutil
import humanize
from disnake.ext import commands
from aiohttp import ClientSession

from utils.db import DBModel, db_models
from utils.music.checks import check_requester_channel
from utils.music.converters import time_format, URL_REG
from utils.others import select_bot_pool, CustomContext, paginator

if TYPE_CHECKING:
    from utils.client import BotCore


def remove_blank_spaces(d):

    for k, v in list(d.items()):

        new_k = k.strip()
        if new_k != k:
            d[new_k] = d.pop(k)

        if isinstance(v, str):
            new_v = v.strip()
            if new_v != v:
                d[new_k] = new_v
        elif isinstance(v, dict):
            remove_blank_spaces(v)


class Misc(commands.Cog):

    emoji = "üî∞"
    name = "Thi·∫øt l·∫≠p"
    desc_prefix = f"[{emoji} {name}] | "

    def __init__(self, bot: BotCore):
        self.bot = bot
        self.activities = None
        self.task = self.bot.loop.create_task(self.presences())
        self.extra_user_bots = []
        self.extra_user_bots_ids = [int(i) for i in bot.config['ADDITIONAL_BOT_IDS'].split() if i.isdigit()]

    def placeholders(self, text: str):

        if not text:
            return ""

        return text \
            .replace("{users}", f'{len([m for m in self.bot.users if not m.bot]):,}'.replace(",", ".")) \
            .replace("{playing}", f'{len(self.bot.music.players):,}'.replace(",", ".")) \
            .replace("{guilds}", f'{len(self.bot.guilds):,}'.replace(",", ".")) \
            .replace("{uptime}", time_format((disnake.utils.utcnow() - self.bot.uptime).total_seconds() * 1000,
                                             use_names=True))


    async def presences(self):

        if not self.activities:

            activities = []

            for i in self.bot.config["LISTENING_PRESENCES"].split("||"):
                if i:
                    activities.append({"name":i, "type": "listening"})

            for i in self.bot.config["WATCHING_PRESENCES"].split("||"):
                if i:
                    activities.append({"name": i, "type": "watching"})

            for i in self.bot.config["PLAYING_PRESENCES"].split("||"):
                if i:
                    activities.append({"name": i, "type": "playing"})

            for i in self.bot.config["STREAMING_PRESENCES"].split("|||"):
                if i:
                    try:
                        name, url = i.split("||")
                        activities.append({"name": name, "url": url.strip(" "), "type": "streaming"})
                    except Exception:
                        traceback.print_exc()

            shuffle(activities)

            self.activities = cycle(activities)

        while True:

            await self.bot.wait_until_ready()

            activity_data = next(self.activities)

            if activity_data["type"] == "listening":
                activity = disnake.Activity(
                    type=disnake.ActivityType.listening,
                    name=self.placeholders(activity_data["name"])
                )

            elif activity_data["type"] == "watching":
                activity = disnake.Activity(
                    type=disnake.ActivityType.watching,
                    name=self.placeholders(activity_data["name"])
                )

            elif activity_data["type"] == "streaming":
                activity = disnake.Activity(
                    type=disnake.ActivityType.streaming,
                    name=self.placeholders(activity_data["name"]),
                    url=activity_data["url"]
                )

            else:
                activity = disnake.Game(name=self.placeholders(activity_data["name"]))

            await self.bot.change_presence(activity=activity)

            await asyncio.sleep(self.bot.config["PRESENCE_INTERVAL"])


    @commands.Cog.listener("on_guild_join")
    async def guild_add(self, guild: disnake.Guild):

        if str(self.bot.user.id) in self.bot.config["INTERACTION_BOTS_CONTROLLER"]:
            await guild.leave()
            return

        interaction_invite = ""

        bots_in_guild = []

        for bot in self.bot.pool.bots:

            if bot == self.bot:
                continue

            if bot.user in guild.members:
                bots_in_guild.append(bot)

        components = [disnake.ui.Button(custom_id="bot_invite", label="C·∫ßn th√™m c√°c bot √¢m nh·∫°c? B·∫•m v√†o ƒë√¢y.")] if [b for b in self.bot.pool.bots if b.appinfo and b.appinfo.bot_public] else []

        if self.bot.pool.controller_bot != self.bot:
            interaction_invite = f"[`{disnake.utils.escape_markdown(str(self.bot.user.name))}`]({disnake.utils.oauth_url(self.bot.user.id, scopes=['applications.commands'])})"

        if cmd:=self.bot.get_command("setup"):
            cmd_text = f"N·∫øu mu·ªën, h√£y s·ª≠ d·ª•ng l·ªánh **/{cmd.name}** ƒê·ªÉ t·∫°o m·ªôt k√™nh chuy√™n d·ª•ng ƒë·ªÉ h·ªèi " \
                        "C√°c b√†i h√°t kh√¥ng c√≥ l·ªánh v√† ƒë·ªÉ l·∫°i tr√¨nh ph√°t nh·∫°c c·ªë ƒë·ªãnh tr√™n m·ªôt k√™nh chuy√™n d·ª•ng.\n\n"
        else:
            cmd_text = ""

        if self.bot.config["SUPPORT_SERVER"]:
            support_server = f"N·∫øu b·∫°n c√≥ b·∫•t k·ª≥ c√¢u h·ªèi ho·∫∑c mu·ªën theo d√µi nh·ªØng tin t·ª©c m·ªõi nh·∫•t, b·∫°n c√≥ th·ªÉ nh·∫≠p [`M√°y ch·ªß h·ªó tr·ª£`]({self.bot.config['SUPPORT_SERVER']})"
        else:
            support_server = ""

        if self.bot.default_prefix and not self.bot.config["INTERACTION_COMMAND_ONLY"]:
            guild_data = await self.bot.get_global_data(guild.id, db_name=DBModel.guilds)
            prefix = disnake.utils.escape_markdown(guild_data['prefix'], as_needed=True)
        else:
            prefix = ""

        image = "https://cdn.discordapp.com/attachments/554468640942981147/1082887587770937455/rainbow_bar2.gif"

        color = self.bot.get_color()

        try:
            channel = guild.system_channel if guild.system_channel.permissions_for(guild.me).send_messages else None
        except AttributeError:
            channel = None

        if not channel:

            if guild.me.guild_permissions.view_audit_log:

                async for entry in guild.audit_logs(action=disnake.AuditLogAction.integration_create, limit=50):

                    if entry.target.application_id == self.bot.user.id:

                        embeds = []

                        embeds.append(
                            disnake.Embed(
                                color=color,
                                description=f"Xin ch√†o!C·∫£m ∆°n b·∫°n r·∫•t nhi·ªÅu v√¨ ƒë√£ th√™m t√¥i v√†o m√°y ch·ªß: **{guild.name}** :)"
                            ).set_image(url=image)
                        )

                        if interaction_invite:
                            embeds.append(
                                disnake.Embed(
                                    color=color,
                                    description=f"**L∆∞u √Ω quan tr·ªçng: ** C√°c l·ªánh thanh c·ªßa t√¥i ho·∫°t ƒë·ªông th√¥ng qua "
                                                f"c√°c ·ª©ng d·ª•ng sau: {interaction_invite}\n\n"
                                                f"N·∫øu c√°c l·ªánh ·ª©ng d·ª•ng ·ªü tr√™n kh√¥ng ƒë∆∞·ª£c hi·ªÉn th·ªã khi nh·∫≠p "
                                                f" (**/**) tr√™n k√™nh m√°y ch·ªß **{guild.name}** B·∫°n s·∫Ω ph·∫£i "
                                                f"Nh·∫•p v√†o t√™n ·ªü tr√™n ƒë·ªÉ t√≠ch h·ª£p c√°c l·ªánh thanh tr√™n m√°y ch·ªß "
                                                f"**{guild.name}**.\n`L∆∞u √Ω: N·∫øu c√°c l·ªánh ch∆∞a xu·∫•t hi·ªán sau "
                                                f"T√≠ch h·ª£p c√°c l·ªánh, c√≥ l·∫Ω m√°y ch·ªß c·ªßa b·∫°n ƒë√£ ƒë·∫°t ƒë·∫øn gi·ªõi h·∫°n "
                                                f"Bot v·ªõi c√°c l·ªánh thanh ƒë√£ ƒëƒÉng k√Ω.`"
                                ).set_image(url=image)
                            )
                        else:
                            embeds.append(
                                disnake.Embed(
                                    color=color,
                                    description=f"ƒê·ªÉ xem t·∫•t c·∫£ c√°c l·ªánh c·ªßa t√¥i s·ª≠ d·ª•ng thanh (**/**) kh√¥ng ph·∫£i m√°y ch·ªß " \
                                                 f"**{guild.name}**"
                                ).set_image(url=image)
                            )

                        if prefix:
                            prefix_msg = f"Ti·ªÅn t·ªë c·ªßa t√¥i tr√™n m√°y ch·ªß **{guild.name}** N√≥ l√†: **{prefix}**"
                        else:
                            prefix = self.bot.default_prefix
                            prefix_msg = f"Ti·ªÅn t·ªë m·∫∑c ƒë·ªãnh c·ªßa t√¥i l√† **{prefix}**"

                        embeds.append(
                            disnake.Embed(
                                color=color,
                                description=f"T√¥i c≈©ng c√≥ c√°c l·ªánh vƒÉn b·∫£n theo ti·ªÅn t·ªë. {prefix_msg} (t√¥i ƒë·ªÅ c·∫≠p ƒë·∫øn "
                                             f" c≈©ng ho·∫°t ƒë·ªông nh∆∞ m·ªôt ti·ªÅn t·ªë). ƒê·ªÉ xem t·∫•t c·∫£ c√°c l·ªánh vƒÉn b·∫£n c·ªßa t√¥i "
                                             f"s·ª≠ d·ª•ng **{prefix}help** trong k√™nh m√°y ch·ªß **{guild.name}**."
                                             f"N·∫øu b·∫°n mu·ªën thay ƒë·ªïi ti·ªÅn t·ªë c·ªßa t√¥i, h√£y s·ª≠ d·ª•ng l·ªánh **{prefix}setprefix** "
                                             f" (b·∫°n c√≥ th·ªÉ c√≥ ti·ªÅn t·ªë c√° nh√¢n b·∫±ng l·ªánh "
                                             f"**{prefix}**)."
                            ).set_image(url=image)
                        )

                        if bots_in_guild:
                            embeds.append(
                                disnake.Embed(
                                    color=color,
                                    description=f"T√¥i nh·∫≠n th·∫•y r·∫±ng c√≥ nh·ªØng bot kh√°c tr√™n m√°y ch·ªß **{guild.name}** trong ƒë√≥ t√¥i t∆∞∆°ng th√≠ch v·ªõi " \
                                                f"h·ªá th·ªëng ƒëa gi·ªçng n√≥i: {', '.join(b.user.mention for b in bots_in_guild)}\n\n"
                                                f"Khi s·ª≠ d·ª•ng c√°c l·ªánh √¢m nh·∫°c (v√≠ d·ª•: ch∆°i) m√† kh√¥ng c√≥ m·ªôt trong nh·ªØng bot "
                                                f"k·∫øt n·ªëi v·ªõi k√™nh, m·ªôt trong nh·ªØng bot mi·ªÖn ph√≠ trong "
                                                f"m√°y ch·ªß."
                                ).set_image(url=image)
                            )

                        if support_server:
                            embeds.append(disnake.Embed(color=color, description=support_server).set_image(url=image))

                        try:
                            return await entry.user.send(embeds=embeds, components=components)
                        except disnake.Forbidden:
                            pass
                        except Exception:
                            traceback.print_exc()
                        break

        if not channel:

            for c in (guild.public_updates_channel, guild.rules_channel):

                if c and c.permissions_for(guild.me).send_messages:
                    channel = c
                    break

            if not channel:
                return

        embeds = []

        if interaction_invite:

            embeds.append(
                disnake.Embed(
                    color=color,
                    description=f"Xin ch√†o! ƒê·ªÉ xem t·∫•t c·∫£ c√°c l·ªánh c·ªßa t√¥i, h√£y nh·∫≠p d·∫•u g·∫°ch ch√©o (**/**) v√† ch·ªçn "
                                 f"c√°c l·ªánh ·ª©ng d·ª•ng sau: {interaction_invite}\n\n"
                                 f"N·∫øu c√°c l·ªánh ·ª©ng d·ª•ng tr√™n kh√¥ng hi·ªÉn th·ªã khi g√µ d·∫•u g·∫°ch ch√©o (**/**) b·∫°n "
                                 f"b·∫°n s·∫Ω ph·∫£i nh·∫•p v√†o t√™n ·ªü tr√™n ƒë·ªÉ t√≠ch h·ª£p c√°c l·ªánh g·∫°ch ch√©o tr√™n m√°y ch·ªß c·ªßa m√¨nh.\n"
                                 f"`L∆∞u √Ω: N·∫øu c√°c l·ªánh v·∫´n kh√¥ng xu·∫•t hi·ªán sau khi h·ª£p nh·∫•t c√°c l·ªánh, c√≥ th·ªÉ m√°y ch·ªß "
                                 f"ƒë√£ ƒë·∫°t ƒë·∫øn gi·ªõi h·∫°n bot v·ªõi c√°c l·ªánh g·∫°ch ch√©o ƒë√£ ƒëƒÉng k√Ω.`"

                ).set_image(url=image)
            )

        else:
            embeds.append(
                disnake.Embed(
                    color=color, description="Xin ch√†o! ƒê·ªÉ xem t·∫•t c·∫£ c√°c l·ªánh c·ªßa t√¥i s·ª≠ d·ª•ng thanh (**/**)"
                ).set_image(url=image)
            )

        if prefix:
            prefix_msg = f"Ti·ªÅn t·ªë c·ªßa t√¥i tr√™n m√°y ch·ªß l√†: **{prefix}**"
        else:
            prefix = self.bot.default_prefix
            prefix_msg = f"Ti·ªÅn t·ªë ti√™u chu·∫©n c·ªßa t√¥i l√† **{prefix}**"

        embeds.append(
            disnake.Embed(
                color=color,
                description=f"T√¥i c≈©ng c√≥ c√°c l·ªánh vƒÉn b·∫£n theo ti·ªÅn t·ªë. {prefix_msg} (t√¥i ƒë·ªÅ c·∫≠p ƒë·∫øn "
                             f" c≈©ng ho·∫°t ƒë·ªông nh∆∞ m·ªôt ti·ªÅn t·ªë). ƒê·ªÉ xem t·∫•t c·∫£ c√°c l·ªánh vƒÉn b·∫£n c·ªßa t√¥i, h√£y s·ª≠ d·ª•ng "
                             f"**{prefix}help**. N·∫øu b·∫°n mu·ªën thay ƒë·ªïi ti·ªÅn t·ªë c·ªßa t√¥i, h√£y s·ª≠ d·ª•ng l·ªánh **{prefix}setprefix** "
                             f"(b·∫°n c√≥ th·ªÉ c√≥ ti·ªÅn t·ªë c√° nh√¢n b·∫±ng l·ªánh **{prefix}setmyprefix**)."
            ).set_image(url=image)
        )

        if bots_in_guild:
            embeds.append(
                disnake.Embed(
                    color=color,
                    description=f"T√¥i nh·∫≠n th·∫•y r·∫±ng c√≥ nh·ªØng bot kh√°c tr√™n m√°y ch·ªß **{guild.name}** trong ƒë√≥ t√¥i t∆∞∆°ng th√≠ch v·ªõi " \
                                f"h·ªá th·ªëng ƒëa gi·ªçng n√≥i: {', '.join(b.user.mention for b in bots_in_guild)}\n\n"
                                f"Khi s·ª≠ d·ª•ng c√°c l·ªánh √¢m nh·∫°c (v√≠ d·ª•: play) m√† kh√¥ng c√≥ m·ªôt trong c√°c bot "
                                f"ƒë√£ k·∫øt n·ªëi v·ªõi k√™nh, m·ªôt trong nh·ªØng bot mi·ªÖn ph√≠ trong "
                                f"m√°y ch·ªß."
                ).set_image(url=image)
            )

        embeds.append(disnake.Embed(color=color, description=cmd_text).set_image(url=image))

        if support_server:
            embeds.append(disnake.Embed(color=color, description=support_server).set_image(url=image))

        kwargs = {"delete_after": 60} if channel == guild.rules_channel else {"delete_after": 300}

        timestamp = int((disnake.utils.utcnow() + datetime.timedelta(seconds=kwargs["delete_after"])).timestamp())

        embeds[-1].description += f"\n\nTh√¥ng b√°o n√†y s·∫Ω t·ª± ƒë·ªông x√≥a: <t:{timestamp}:R>"

        try:
            await channel.send(embeds=embeds, components=components, **kwargs)
        except:
            print(f"Kh√¥ng g·ª≠i ƒë∆∞·ª£c tin nh·∫Øn m√°y ch·ªß m·ªõi tr√™n k√™nh: {channel}\n"
                  f"Id k√™nh: {channel.id}\n"
                  f"Lo·∫°i k√™nh: {type(channel)}\n"
                  f"{traceback.format_exc()}")

        await self.bot.update_appinfo()


    about_cd = commands.CooldownMapping.from_cooldown(1, 5, commands.BucketType.member)

    @commands.command(name="about", aliases=["sobre", "info", "botinfo"], description="Hi·ªÉn th·ªã th√¥ng tin v·ªÅ t√¥i.",
                      cooldown=about_cd)
    async def about_legacy(self, ctx: CustomContext):
        await self.about.callback(self=self, inter=ctx)


    @commands.slash_command(
        description=f"{desc_prefix}Hi·ªÉn th·ªã th√¥ng tin v·ªÅ t√¥i.", cooldown=about_cd
    )
    async def about(
            self,
            inter: disnake.AppCmdInter
    ):

        await inter.response.defer(ephemeral=True)

        inter, bot = await select_bot_pool(inter, first=True)

        if not bot:
            return

        ram_usage = humanize.naturalsize(psutil.Process(getpid()).memory_info().rss)

        guild = bot.get_guild(inter.guild_id) or inter.guild

        embed = disnake.Embed(
            description=f"<:emoji_6150:1146254135331651695> **Th√¥ng tin c·ªßa {bot.user}:** <:emoji_6150:1146254135331651695> \n\n",
            color=bot.get_color(inter.guild.me if inter.guild else guild.me)
        )

        active_players_other_bots = 0
        inactive_players_other_bots = 0
        paused_players_other_bots = 0

        all_guilds_ids = set()

        for b in bot.pool.bots:

            try:
                if str(b.user.id) in self.bot.config["INTERACTION_BOTS_CONTROLLER"]:
                    continue
            except:
                pass

            for g in b.guilds:
                all_guilds_ids.add(g.id)

        guilds_size = len(all_guilds_ids)

        embed.description += f"> <:AyakaAnnoyed:1135418690632957993> **S·ªë m√°y ch·ªß tui ƒëang ·ªü" + (" (t·∫•t c·∫£ c√°c bot)" if guilds_size > 1 else "") + \
                             f":** `{guilds_size}`\n"

        public_bot_count = 0
        private_bot_count = 0

        for b in bot.pool.bots:

            try:
                if str(b.user.id) in self.bot.config["INTERACTION_BOTS_CONTROLLER"]:
                    continue
            except:
                pass

            for p in b.music.players.values():

                if p.auto_pause:
                    inactive_players_other_bots += 1

                elif p.paused:
                    try:
                        if any(m for m in p.guild.me.voice.channel.members if not m.bot):
                            paused_players_other_bots += 1
                            continue
                    except AttributeError:
                        pass
                    inactive_players_other_bots += 1

                else:
                    active_players_other_bots += 1


        if active_players_other_bots:
            embed.description += f"> <:disc:1140220627781943339> **ƒêang ph√°t" + (" (T·∫•t c·∫£ c√°c bot)" if len(bot.pool.bots) > 1 else "") + \
                                 f":** `{active_players_other_bots}`\n"

        if paused_players_other_bots:
            embed.description += f"> <:pause:1140220668110180352> **T·∫°m d·ª´ng" + (" (T·∫•t c·∫£ c√°c bot)" if len(bot.pool.bots) > 1 else "") + \
                                 f":** `{paused_players_other_bots}`\n"

        if inactive_players_other_bots:
            embed.description += f"> <:stop:1140221258575925358> **Ng∆∞·ªùi ch∆°i kh√¥ng ho·∫°t ƒë·ªông" + (" (T·∫•t c·∫£ c√°c bot)" if len(bot.pool.bots) > 1 else "") + \
                                 f":** `{inactive_players_other_bots}`\n"

        if bot.pool.commit:
            embed.description += f"> <:upvote:1146329733102047242> **Phi√™n b·∫£n (sech):** [`{bot.pool.commit[:7]}`]({bot.pool.remote_git_url}/commit/{bot.pool.commit})\n"

        embed.description += f"> <:python:1119837192152424448> **Phi√™n b·∫£n c·ªßa Python:** `{platform.python_version()}`\n" \
                             f"> <:disnake:1119830259756454019> **Phi√™n b·∫£n c·ªßa Disnake:** `{disnake.__version__}`\n" \
                             f"> üì∂ **ƒê·ªô tr·ªÖ:** `{round(bot.latency * 100)}ms`\n" \
                             f"> <:ram:1119837260532154448> **S·ª≠ d·ª•ng RAM:** `{ram_usage}`\n" \
                             f"> <a:loading:1117802386333905017> **L·∫ßn kh·ªüi ƒë·ªông l·∫°i cu·ªëi c√πng:** <t:{int(bot.uptime.timestamp())}:R>\n"

        if not bot.config["INTERACTION_COMMAND_ONLY"]:

            try:
                guild_data = inter.global_guild_data
            except AttributeError:
                guild_data = await bot.get_global_data(inter.guild_id, db_name=DBModel.guilds)
                inter.global_guild_data = guild_data

            if guild_data["prefix"]:
                embed.description += f"> <:ll:1138141608924172339> **Prefix m√°y ch·ªß:** `{disnake.utils.escape_markdown(guild_data['prefix'], as_needed=True)}`\n"
            else:
                embed.description += f"> <:ll:1138141608924172339> **Prefix ƒë√£ c√†i ƒë·∫∑t s·∫µn:** `{disnake.utils.escape_markdown(bot.default_prefix, as_needed=True)}`\n"

            try:
                user_data = inter.global_user_data
            except AttributeError:
                user_data = await bot.get_global_data(inter.author.id, db_name=DBModel.users)
                inter.global_user_data = user_data

            if user_data["custom_prefix"]:
                embed.description += f"> <:ll:1138141608924172339> **Prefix c·ªßa b·∫°n:** `{disnake.utils.escape_markdown(user_data['custom_prefix'], as_needed=True)}`\n"

        links = f"<:emoji_6150:1146254135331651695> Kasadinnnnnnnnnnn"

        if bot.config["SUPPORT_SERVER"]:
            links += f" **|** [`[H·ªó tr·ª£]`]({bot.config['SUPPORT_SERVER']})"

        embed.description += f">  {links}\n"

        try:
            owner = bot.appinfo.team.owner
        except AttributeError:
            owner = bot.appinfo.owner

        try:
            avatar = owner.avatar.with_static_format("png").url
        except AttributeError:
            avatar = owner.default_avatar.with_static_format("png").url

        embed.set_footer(
            icon_url=avatar,
            text=f"Ch·ªß s·ªü h·ªØu: {owner} [{owner.id}]"
        )

        components = [disnake.ui.Button(custom_id="bot_invite", label="M·ªùi tui v√†o m√°y ch·ªß c·ªßa b·∫°n")] if [b for b in bot.pool.bots if b.appinfo and (b.appinfo.bot_public or await b.is_owner(inter.author))] else None

        try:
            await inter.edit_original_message(embed=embed, components=components)
        except (AttributeError, disnake.InteractionNotEditable):
            try:
                await inter.response.edit_message(embed=embed, components=components)
            except:
                await inter.send(embed=embed, ephemeral=True, components=components)


    @commands.Cog.listener("on_button_click")
    async def invite_button(self, inter: disnake.MessageInteraction, is_command=False):

        if not is_command and inter.data.custom_id != "bot_invite":
            return

        bots_invites = []
        bots_in_guild = []

        guild = inter.guild

        if not guild:
            for bot in self.bot.pool.bots:
                if (guild:=bot.get_guild(inter.guild_id)):
                    break

        for bot in sorted(self.bot.pool.bots, key=lambda b: len(b.guilds)):

            try:
                if not bot.appinfo.bot_public and not await bot.is_owner(inter.author):
                    continue
            except:
                continue

            if str(bot.user.id) in bot.config['INTERACTION_BOTS_CONTROLLER']:
                continue

            kwargs = {"redirect_uri": self.bot.config['INVITE_REDIRECT_URL']} if self.bot.config['INVITE_REDIRECT_URL'] else {}

            invite = f"[`{disnake.utils.escape_markdown(str(bot.user.name))}`]({disnake.utils.oauth_url(bot.user.id, permissions=disnake.Permissions(bot.config['INVITE_PERMISSIONS']), scopes=('bot', 'applications.commands'), **kwargs)})"

            if not str(bot.user.id) not in self.bot.config["INTERACTION_BOTS_CONTROLLER"] and bot.appinfo.flags.gateway_message_content_limited:
                invite += f" ({len(bot.guilds)}/100)"
            else:
                invite += f" ({len(bot.guilds)})"

            if guild and inter.author.guild_permissions.manage_guild and bot.user in guild.members:
                bots_in_guild.append(invite)
            else:
                bots_invites.append(invite)

        txt = ""

        if bots_invites:
            txt += "**Bot c√≥ s·∫µn:**\n"
            for i in disnake.utils.as_chunks(bots_invites, 2):
                txt += " | ".join(i) + "\n"
            txt += "\n"

        if bots_in_guild:
            txt += "**C√°c bot ƒë√£ c√≥ tr√™n m√°y ch·ªß hi·ªán t·∫°i:**\n"
            for i in disnake.utils.as_chunks(bots_in_guild, 2):
                txt += " | ".join(i) + "\n"

        if not txt:
            await inter.send(
                embed=disnake.Embed(
                    colour=self.bot.get_color(
                        inter.guild.me if inter.guild else guild.me if guild else None
                    ),
                    title="**Kh√¥ng c√≥ bot c√¥ng khai c√≥ s·∫µn.**",
                ), ephemeral=True
            )
            return

        controller_bot = self.bot.pool.controller_bot

        if (len(bots_in_guild) + len(bots_invites)) > 1 and f"client_id={controller_bot.user.id}" not in txt:
            invite = f"[`{disnake.utils.escape_markdown(str(controller_bot.user.name))}`]({disnake.utils.oauth_url(controller_bot.user.id, scopes=['applications.commands'])})"
            txt = f"**Ghi l·∫°i c√°c l·ªánh thanh tr√™n m√°y ch·ªß:**\n{invite}\n\n" + txt

        color = self.bot.get_color(inter.guild.me if inter.guild else guild.me if guild else None)

        embeds = [
            disnake.Embed(
                colour=self.bot.get_color(inter.guild.me if inter.guild else guild.me if guild else None),
                description=p, color=color
            ) for p in paginator(txt)
        ]

        await inter.send(embeds=embeds, ephemeral=True)


    @commands.command(name="invite", aliases=["convidar"], description="Hi·ªÉn th·ªã li√™n k·∫øt l·ªùi m·ªùi c·ªßa t√¥i ƒë·ªÉ b·∫°n th√™m t√¥i v√†o m√°y ch·ªß c·ªßa b·∫°n.")
    async def invite_legacy(self, ctx):
        await self.invite.callback(self=self, inter=ctx)


    @commands.slash_command(
        description=f"{desc_prefix}Hi·ªÉn th·ªã li√™n k·∫øt l·ªùi m·ªùi c·ªßa t√¥i ƒë·ªÉ b·∫°n th√™m t√¥i v√†o m√°y ch·ªß c·ªßa b·∫°n."
    )
    async def invite(self, inter: disnake.AppCmdInter):

        await inter.response.defer(ephemeral=True)

        await self.invite_button(inter, is_command=True)

    @commands.user_command(name="avatar")
    async def avatar(self, inter: disnake.UserCommandInteraction):

        embeds = []

        assets = {}

        if self.bot.intents.members:
            user = (await self.bot.fetch_user(inter.target.id) if not inter.target.bot else self.bot.get_user(inter.target.id))
        else:
            user = inter.target

        try:
            if inter.target.guild_avatar:
                assets["Avatar (Server)"] = inter.target.guild_avatar.with_static_format("png")
        except AttributeError:
            pass
        assets["Avatar (User)"] = user.display_avatar.with_static_format("png")
        if user.banner:
            assets["Banner"] = user.banner.with_static_format("png")

        for name, asset in assets.items():
            embed = disnake.Embed(description=f"{inter.target.mention} **[{name}]({asset.with_size(2048).url})**",
                                  color=self.bot.get_color(inter.guild.me if inter.guild else None))
            embed.set_image(asset.with_size(256).url)
            embeds.append(embed)

        await inter.send(embeds=embeds, ephemeral=True)

    @commands.is_owner()
    @commands.max_concurrency(1, commands.BucketType.default)
    @commands.command(hidden=True, description="L·ªánh t·∫°m th·ªùi ƒë·ªÉ s·ª≠a l·ªói y√™u th√≠ch v·ªõi kho·∫£ng tr·ªëng "
                                               "g√¢y ra l·ªói trong m·ªôt s·ªë t√¨nh hu·ªëng.")
    async def fixfavs(self, ctx: CustomContext):

        if not os.path.isdir("./local_database/fixfavs_backup"):
            os.makedirs("./local_database/fixfavs_backup")

        async with ctx.typing():

            for bot in self.bot.pool.bots:

                db_data = await bot.pool.database.query_data(collection=str(bot.user.id), db_name=DBModel.guilds, limit=300)
    
                async with aiofiles.open(f"./local_database/fixfavs_backup/guild_favs_{bot.user.id}.json", "w") as f:
                    await f.write(json.dumps(db_data, indent=4))

                for data in db_data:
                    try:
                        remove_blank_spaces(data["player_controller"]["fav_links"])
                    except KeyError:
                        continue
                    await bot.update_data(id_=data["_id"], data=data, db_name=DBModel.guilds)

            db_data = await self.bot.pool.database.query_data(collection="global", db_name=DBModel.users, limit=500)

            async with aiofiles.open("./local_database/fixfavs_backup/user_favs.json", "w") as f:
                await f.write(json.dumps(db_data, indent=4))

            for data in db_data:
                remove_blank_spaces(data["fav_links"])
                await self.bot.update_global_data(id_=data["_id"], data=data, db_name=DBModel.users)

            await ctx.send("C√°c m·ª•c y√™u th√≠ch ƒë√£ ƒë∆∞·ª£c s·ª≠a ch·ªØa th√†nh c√¥ng!")

    async def cog_check(self, ctx):
        return await check_requester_channel(ctx)

    def cog_unload(self):

        try:
            self.task.cancel()
        except:
            pass


class GuildLog(commands.Cog):

    def __init__(self, bot: BotCore):
        self.bot = bot
        self.hook_url: str = ""

        if bot.config["BOT_ADD_REMOVE_LOG"]:

            if URL_REG.match(bot.config["BOT_ADD_REMOVE_LOG"]):
                self.hook_url = bot.config["BOT_ADD_REMOVE_LOG"]
            else:
                print("URL Webhook kh√¥ng h·ª£p l·ªá (ƒë·ªÉ g·ª≠i nh·∫≠t k√Ω khi th√™m/x√≥a bot).")

    @commands.Cog.listener()
    async def on_guild_remove(self, guild: disnake.Guild):

        if str(self.bot.user.id) in self.bot.config["INTERACTION_BOTS_CONTROLLER"]:
            return

        print(f"B·ªã x√≥a kh·ªèi m√°y ch·ªß: {guild.name} - [{guild.id}]")

        try:
            await self.bot.music.players[guild.id].destroy()
        except:
            pass

        if not self.hook_url:
            return

        embed = disnake.Embed(
            description=f"**ƒê√£ lo·∫°i t√¥i kh·ªèi m√°y ch·ªß:**\n"
                        f"```{guild.name}```\n"
                        f"**ID:** `{guild.id}`",
            color=disnake.Colour.red()
        )

        try:
            guild_data = await self.bot.get_data(guild.id, db_name=DBModel.guilds)
            guild_data["player_controller"] = db_models[DBModel.guilds]["player_controller"]
            await self.bot.update_data(guild.id, guild_data, db_name=DBModel.guilds)
        except:
            traceback.print_exc()

        try:
            embed.set_thumbnail(url=guild.icon.replace(static_format="png").url)
        except AttributeError:
            pass

        try:
            await self.send_hook(", ".join(f"<@{owner_id}>" for owner_id in self.bot.owner_ids) or self.bot.owner.mention, embed=embed)
        except:
            traceback.print_exc()

        await self.bot.update_appinfo()

    @commands.Cog.listener()
    async def on_guild_join(self, guild: disnake.Guild):

        if str(self.bot.user.id) in self.bot.config["INTERACTION_BOTS_CONTROLLER"]:
            return

        print(f"M√°y ch·ªß m·ªõi: {guild.name} - [{guild.id}]")

        try:
            guild_data = await self.bot.get_data(guild.id, db_name=DBModel.guilds)
            guild_data["player_controller"] = db_models[DBModel.guilds]["player_controller"]
            await self.bot.update_data(guild.id, guild_data, db_name=DBModel.guilds)
        except:
            traceback.print_exc()

        if not self.hook_url:
            return

        created_at = int(guild.created_at.timestamp())

        embed =disnake.Embed(
            description="__**ƒê√£ th√™m t√¥i v√†o m·ªôt m√°y ch·ªß m·ªõi:**__\n"
                        f"```{guild.name}```\n"
                        f"**ID:** `{guild.id}`\n"
		                f"**Ch·ªß s·ªü h·ªØu:** `{guild.owner} [{guild.owner.id}]`\n"
                        f"**ƒê∆∞·ª£c t·∫°o ra v√†o:** <t:{created_at}:f> - <t:{created_at}:R>\n"
		                f"**M·ª©c x√°c minh:** `{guild.verification_level or 'nenhuma'}`\n"
		                f"**S·ªë th√†nh vi√™n:** `{len([m for m in guild.members if not m.bot])}`\n"
		                f"**Bot:** `{len([m for m in guild.members if m.bot])}`\n",
            color=disnake.Colour.green()
        )

        try:
            embed.set_thumbnail(url=guild.icon.replace(static_format="png").url)
        except AttributeError:
            pass

        try:
            await self.send_hook(", ".join(f"<@{owner_id}>" for owner_id in self.bot.owner_ids) or self.bot.owner.mention, embed=embed)
        except:
            traceback.print_exc()

        await self.bot.update_appinfo()

    async def send_hook(self, content="", *, embed: disnake.Embed=None):

        async with ClientSession() as session:
            webhook = disnake.Webhook.from_url(self.hook_url, session=session)
            await webhook.send(
                content=content,
                username=self.bot.user.name,
                avatar_url=self.bot.user.display_avatar.replace(size=256, static_format="png").url,
                embed=embed
            )


def setup(bot: BotCore):
    bot.add_cog(Misc(bot))
    bot.add_cog(GuildLog(bot))
